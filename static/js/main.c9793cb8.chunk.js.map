{"version":3,"sources":["assets/images/noPosterSmall.png","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Components/Header.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["Container","styled","div","Title","span","Grid","Section","title","children","Loader","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","require","default","length","substring","HomePresenter","nowPlaying","upcoming","popular","loading","error","Helmet","map","movie","api","axios","create","baseURL","params","api_key","language","movieApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","a","data","results","this","setState","React","Component","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","show","SearchContainer","e","preventDefault","searchByTerm","target","console","log","TVPresenter","topRated","airingToday","TVContainer","Header","header","List","ul","Item","li","current","SLink","Link","withRouter","pathname","location","imagePath","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Divider","Overview","p","DetailPresenter","result","original_title","original_name","release_date","first_air_date","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","router","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9793cb8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noPosterSmall.ea2ad102.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    :not(:last-child) {\n        margin-bottom: 50px;\n    }\n`;\nconst Title = styled.span`\n    font-size: 14px;\n    font-weight: 600;\n`;\nconst Grid = styled.div`\n    margin-top: 25px;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 125px);\n    grid-gap: 25px;\n`;\n\nconst Section = ({ title, children }) => (\n    <Container>\n        <Title>{title}</Title>\n        <Grid>{children}</Grid>\n    </Container>\n);\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n    font-size: 28px;\n    margin-top: 20px;\n`;\n\nconst Loader = () => (\n    <Container>\n        <span role=\"img\" aria-label=\"Loading\">\n            ⏰\n        </span>\n    </Container>\n);\n\nexport default Loader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n`;\n\nconst Text = styled.span`\n    color: ${(props) => props.color};\n`;\n\nconst Message = ({ text, color }) => (\n    <Container>\n        <Text color={color}>{text}</Text>\n    </Container>\n);\n\nMessage.propTypes = {\n    text: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n};\n\nexport default Message;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst imagePath = 'https://image.tmdb.org/t/p/w300';\n\nconst Container = styled.div`\n    font-size: 12px;\n`;\n\nconst Image = styled.div`\n    height: 180px;\n    background-size: cover;\n    border-radius: 4px;\n    background-position: center center;\n    background-image: url(${(props) => props.bgUrl});\n    transition: opacity 0.2s linear;\n`;\n\nconst Rating = styled.span`\n    position: absolute;\n    bottom: 5px;\n    right: 5px;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n`;\n\nconst ImageContainer = styled.div`\n    margin-bottom: 5px;\n    position: relative;\n    &:hover {\n        ${Image} {\n            opacity: 0.3;\n        }\n        ${Rating} {\n            opacity: 1;\n        }\n    }\n`;\n\nconst Title = styled.span`\n    display: block;\n    margin-bottom: 3px;\n`;\n\nconst Year = styled.span`\n    font-size: 10px;\n    color: rgba(255, 255, 255, 0.5);\n`;\n\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\n    <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\n        <Container>\n            <ImageContainer>\n                <Image\n                    bgUrl={\n                        imageUrl\n                            ? imagePath + imageUrl\n                            : require('../assets/images/noPosterSmall.png').default\n                    }\n                />\n                <Rating>\n                    <span role=\"img\" aria-label=\"rating\">\n                        ⭐️\n                    </span>{' '}\n                    {rating}/10\n                </Rating>\n            </ImageContainer>\n            <Title>{title.length > 14 ? `${title.substring(0, 13)}...` : title}</Title>\n            <Year>{year}</Year>\n        </Container>\n    </Link>\n);\n\nPoster.propTypes = {\n    id: PropTypes.number.isRequired,\n    imageUrl: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    rating: PropTypes.number,\n    year: PropTypes.string,\n    isMovie: PropTypes.bool,\n};\n\nexport default Poster;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Helmet } from 'react-helmet';\nimport Section from '../../Components/Section';\nimport Loader from '../../Components/Loader';\nimport Message from '../../Components/Message';\nimport Poster from '../../Components/Poster';\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n\nconst HomePresenter = ({ nowPlaying, upcoming, popular, loading, error }) => (\n    <>\n        <Helmet>\n            <title>Movies | Nomflix</title>\n        </Helmet>\n        {loading ? (\n            <Loader />\n        ) : (\n            <Container>\n                {nowPlaying && nowPlaying.length > 0 && (\n                    <Section title=\"Now Playing\">\n                        {nowPlaying.map((movie) => (\n                            <Poster\n                                key={movie.id}\n                                id={movie.id}\n                                title={movie.title}\n                                rating={movie['vote_average']}\n                                isMovie={true}\n                                imageUrl={movie['poster_path']}\n                                year={\n                                    movie['release_date'] && movie['release_date'].substring(0, 4)\n                                }\n                            />\n                        ))}\n                    </Section>\n                )}\n                {upcoming && upcoming.length > 0 && (\n                    <Section title=\"Upcoming Movie\">\n                        {upcoming.map((movie) => (\n                            <Poster\n                                key={movie.id}\n                                id={movie.id}\n                                title={movie.title}\n                                rating={movie['vote_average']}\n                                isMovie={true}\n                                imageUrl={movie['poster_path']}\n                                year={\n                                    movie['release_date'] && movie['release_date'].substring(0, 4)\n                                }\n                            />\n                        ))}\n                    </Section>\n                )}\n                {popular && popular.length > 0 && (\n                    <Section title=\"Popular Movie\">\n                        {popular.map((movie) => (\n                            <Poster\n                                key={movie.id}\n                                id={movie.id}\n                                title={movie.title}\n                                rating={movie['vote_average']}\n                                isMovie={true}\n                                imageUrl={movie['poster_path']}\n                                year={\n                                    movie['release_date'] && movie['release_date'].substring(0, 4)\n                                }\n                            />\n                        ))}\n                    </Section>\n                )}\n                {error && <Message color=\"#e74c3c\" text={error} />}\n            </Container>\n        )}\n    </>\n);\n\nHomePresenter.propTypes = {\n    nowPlaying: PropTypes.array,\n    upcoming: PropTypes.array,\n    popular: PropTypes.array,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n};\n\nexport default HomePresenter;\n","import axios from \"axios\";\n\nconst api = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n    params: {\n        api_key: \"7fe392ebe17f3eee166b68fa255ffa6d\",\n        language: \"en-US\",\n    },\n});\n\nexport const movieApi = {\n    nowPlaying: () => api.get(\"/movie/now_playing\"),\n    upcoming: () => api.get(\"/movie/upcoming\"),\n    popular: () => api.get(\"/movie/popular\"),\n    movieDetail: (id) =>\n        api.get(`/movie/${id}`, { params: { append_to_response: \"videos\" } }),\n    search: (term) =>\n        api.get(\"/search/movie\", {\n            params: { query: encodeURIComponent(term) },\n        }),\n};\n\nexport const tvApi = {\n    topRated: () => api.get(\"/tv/top_rated\"),\n    popular: () => api.get(\"/tv/popular\"),\n    airingToday: () => api.get(\"/tv/airing_today\"),\n    showDetail: (id) =>\n        api.get(`/tv/${id}`, { params: { append_to_response: \"videos\" } }),\n    search: (term) =>\n        api.get(\"/search/tv\", { params: { query: encodeURIComponent(term) } }),\n};\n","import HomeContainer from \"./HomeContainer\";\n\nexport default HomeContainer;\n","import React from 'react';\nimport HomePresenter from './HomePresenter';\nimport { movieApi } from '../../api';\n\nexport default class HomeContainer extends React.Component {\n    state = {\n        nowPlaying: null,\n        upcoming: null,\n        popular: null,\n        error: null,\n        loading: true,\n    };\n\n    async componentDidMount() {\n        try {\n            const {\n                data: { results: nowPlaying },\n            } = await movieApi.nowPlaying();\n            const {\n                data: { results: upcoming },\n            } = await movieApi.upcoming();\n            const {\n                data: { results: popular },\n            } = await movieApi.popular();\n\n            this.setState({\n                nowPlaying,\n                upcoming,\n                popular,\n            });\n        } catch (e) {\n            this.setState({\n                error: \"Can't find Movies information\",\n            });\n        } finally {\n            this.setState({\n                loading: false,\n            });\n        }\n    }\n\n    render() {\n        const { nowPlaying, popular, upcoming, error, loading } = this.state;\n        return (\n            <HomePresenter\n                nowPlaying={nowPlaying}\n                upcoming={upcoming}\n                popular={popular}\n                error={error}\n                loading={loading}\n            />\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Loader from '../../Components/Loader';\nimport Section from '../../Components/Section';\nimport Message from '../../Components/Message';\nimport Poster from '../../Components/Poster';\nimport { Helmet } from 'react-helmet';\n\nconst Container = styled.div`\n    padding: 20px;\n`;\nconst Form = styled.form`\n    margin-bottom: 50px;\n`;\nconst Input = styled.input`\n    all: unset;\n    font-size: 28px;\n    width: 24rem;\n`;\n\nconst SearchPresenter = ({\n    movieResults,\n    tvResults,\n    searchTerm,\n    loading,\n    error,\n    handleSubmit,\n    updateTerm,\n}) => (\n    <Container>\n        <Helmet>\n            <title>Search | Nomflix</title>\n        </Helmet>\n        <Form onSubmit={handleSubmit}>\n            <Input\n                placeholder=\"Search Movies or TV Show...\"\n                value={searchTerm}\n                onChange={updateTerm}\n            />\n        </Form>\n        {loading ? (\n            <Loader />\n        ) : (\n            <>\n                {movieResults && movieResults.length > 0 && (\n                    <Section title=\"Movie Results\">\n                        {movieResults.map((movie) => (\n                            <Poster\n                                key={movie.id}\n                                id={movie.id}\n                                title={movie.title}\n                                rating={movie['vote_average']}\n                                isMovie\n                                imageUrl={movie['poster_path']}\n                                year={\n                                    movie['release_date'] && movie['release_date'].substring(0, 4)\n                                }\n                            />\n                        ))}\n                    </Section>\n                )}\n                {tvResults && tvResults.length > 0 && (\n                    <Section title=\"TV Results\">\n                        {tvResults.map((show) => (\n                            <Poster\n                                key={show.id}\n                                id={show.id}\n                                title={show['original_name']}\n                                rating={show['vote_average']}\n                                imageUrl={show['poster_path']}\n                                year={\n                                    show['first_air_date'] && show['first_air_date'].substring(0, 4)\n                                }\n                            />\n                        ))}\n                    </Section>\n                )}\n            </>\n        )}\n        {error && <Message color=\"#e74c3c\" text={error} />}\n        {tvResults && movieResults && tvResults.length === 0 && movieResults.length === 0 && (\n            <Message color=\"#95a5a6\" text=\"Nothing found\" />\n        )}\n    </Container>\n);\n\nSearchPresenter.propTypes = {\n    movieResults: PropTypes.array,\n    tvResults: PropTypes.array,\n    error: PropTypes.string,\n    searchTerm: PropTypes.string,\n    loading: PropTypes.bool.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n    updateTerm: PropTypes.func.isRequired,\n};\n\nexport default SearchPresenter;\n","import SearchContainer from \"./SearchContainer\";\nexport default SearchContainer;\n","import React from 'react';\nimport SearchPresenter from './SearchPresenter';\nimport { movieApi, tvApi } from '../../api';\n\nexport default class SearchContainer extends React.Component {\n    state = {\n        movieResults: null,\n        tvResults: null,\n        searchTerm: '',\n        error: null,\n        loading: true,\n    };\n\n    componentDidMount() {\n        this.setState({\n            loading: false,\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const { searchTerm } = this.state;\n        if (searchTerm !== '') {\n            this.searchByTerm();\n        }\n    };\n\n    updateTerm = (e) => {\n        const {\n            target: { value },\n        } = e;\n        this.setState({\n            searchTerm: value,\n        });\n    };\n\n    searchByTerm = async () => {\n        this.setState({\n            loading: true,\n        });\n        const { searchTerm } = this.state;\n        try {\n            const {\n                data: { results: movieResults },\n            } = await movieApi.search(searchTerm);\n            const {\n                data: { results: tvResults },\n            } = await tvApi.search(searchTerm);\n\n            this.setState({\n                loading: true,\n                movieResults,\n                tvResults,\n            });\n        } catch (e) {\n            console.log('error');\n            this.setState({\n                error: \"Can't find result\",\n            });\n        } finally {\n            this.setState({\n                loading: false,\n            });\n        }\n    };\n\n    render() {\n        const { movieResults, tvResults, searchTerm, loading, error } = this.state;\n        return (\n            <SearchPresenter\n                movieResults={movieResults}\n                tvResults={tvResults}\n                searchTerm={searchTerm}\n                loading={loading}\n                error={error}\n                handleSubmit={this.handleSubmit}\n                updateTerm={this.updateTerm}\n            />\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Section from '../../Components/Section';\nimport Message from '../../Components/Message';\nimport Poster from '../../Components/Poster';\nimport { Helmet } from 'react-helmet';\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n\nconst TVPresenter = ({ topRated, popular, airingToday, loading, error }) => (\n    <>\n        <Helmet>\n            <title>TV | Nomflix</title>\n        </Helmet>\n        {loading ? null : (\n            <Container>\n                {topRated && topRated.length && (\n                    <Section title=\"Top Rated Shows\">\n                        {topRated.map((show) => (\n                            <Poster\n                                key={show.id}\n                                id={show.id}\n                                title={show['original_name']}\n                                rating={show['vote_average']}\n                                imageUrl={show['poster_path']}\n                                year={\n                                    show['first_air_date'] && show['first_air_date'].substring(0, 4)\n                                }\n                            />\n                        ))}\n                    </Section>\n                )}\n                {popular && popular.length && (\n                    <Section title=\"Popular Shows\">\n                        {popular.map((show) => (\n                            <Poster\n                                key={show.id}\n                                id={show.id}\n                                title={show['original_name']}\n                                rating={show['vote_average']}\n                                imageUrl={show['poster_path']}\n                                year={\n                                    show['first_air_date'] && show['first_air_date'].substring(0, 4)\n                                }\n                            />\n                        ))}\n                    </Section>\n                )}\n                {airingToday && airingToday.length && (\n                    <Section title=\"Airing Today\">\n                        {airingToday.map((show) => (\n                            <Poster\n                                key={show.id}\n                                id={show.id}\n                                title={show['original_name']}\n                                rating={show['vote_average']}\n                                imageUrl={show['poster_path']}\n                                year={\n                                    show['first_air_date'] && show['first_air_date'].substring(0, 4)\n                                }\n                            />\n                        ))}\n                    </Section>\n                )}\n                {error && <Message color=\"#e74c3c\" text={error} />}\n            </Container>\n        )}\n    </>\n);\nTVPresenter.propTypes = {\n    topRated: PropTypes.array,\n    popular: PropTypes.array,\n    airingToday: PropTypes.array,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n};\n\nexport default TVPresenter;\n","import TVContainer from \"./TVContainer\";\nexport default TVContainer;\n","import React from 'react';\nimport TVPresenter from './TVPresenter';\nimport { tvApi } from '../../api';\n\nexport default class TVContainer extends React.Component {\n    state = {\n        topRated: null,\n        popular: null,\n        airingToday: null,\n        error: null,\n        loading: true,\n    };\n\n    async componentDidMount() {\n        try {\n            const {\n                data: { results: topRated },\n            } = await tvApi.topRated();\n            const {\n                data: { results: popular },\n            } = await tvApi.popular();\n            const {\n                data: { results: airingToday },\n            } = await tvApi.airingToday();\n\n            this.setState({\n                topRated,\n                popular,\n                airingToday,\n            });\n        } catch (e) {\n            this.setState({\n                error: \"Can't find TV information.\",\n            });\n        } finally {\n            this.setState({\n                loading: false,\n            });\n        }\n    }\n\n    render() {\n        const { popular, airingToday, topRated, loading, error } = this.state;\n        return (\n            <TVPresenter\n                topRated={topRated}\n                popular={popular}\n                airingToday={airingToday}\n                loading={loading}\n                error={error}\n            />\n        );\n    }\n}\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Header = styled.header`\n    color: white;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    background-color: rgba(20, 20, 20, 0.8);\n    z-index: 10;\n    box-shadow: 0 1px 5px 2px rgba(0, 0, 0, 0.8);\n`;\n\nconst List = styled.ul`\n    display: flex;\n`;\n\nconst Item = styled.li`\n    width: 80px;\n    height: 50px;\n    border-bottom: 3px solid ${(props) => (props.current ? '#3498db' : 'transparent')};\n    transition: border-bottom 0.5s ease-in-out;\n`;\n\nconst SLink = styled(Link)`\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport default withRouter(({ location: { pathname } }) => (\n    <Header>\n        <List>\n            <Item current={pathname === '/'}>\n                <SLink to=\"/\">Movies</SLink>\n            </Item>\n            <Item current={pathname === '/tv'}>\n                <SLink to=\"/tv\">TV</SLink>\n            </Item>\n            <Item current={pathname === '/search'}>\n                <SLink to=\"/search\">Search</SLink>\n            </Item>\n        </List>\n    </Header>\n));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Loader from '../../Components/Loader';\nimport Message from '../../Components/Message';\nimport { Helmet } from 'react-helmet';\n\nconst imagePath = 'https://image.tmdb.org/t/p/original';\n\nconst Container = styled.div`\n    height: calc(100vh - 50px);\n    width: 100%;\n    position: relative;\n    padding: 50px;\n`;\n\nconst Backdrop = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: url(${(props) => props.bgImage});\n    background-size: cover;\n    background-position: center center;\n    filter: blur(3px);\n    opacity: 0.5;\n    z-index: 0;\n`;\n\nconst Content = styled.div`\n    display: flex;\n    width: 100%;\n    height: 100%;\n    position: relative;\n    z-index: 1;\n`;\n\nconst Cover = styled.div`\n    width: 30%;\n    background-image: url(${(props) => props.bgImage});\n    background-size: cover;\n    background-position: center center;\n    filter: blur(0);\n    height: 100%;\n    border-radius: 5px;\n`;\n\nconst Data = styled.div`\n    width: 70%;\n    margin-left: 10px;\n`;\n\nconst Title = styled.h3`\n    font-size: 32px;\n`;\n\nconst ItemContainer = styled.div`\n    margin: 20px 0;\n`;\n\nconst Item = styled.span``;\n\nconst Divider = styled.span`\n    margin: 0 10px;\n`;\n\nconst Overview = styled.p`\n    font-size: 12px;\n    opacity: 0.7;\n    line-height: 1.5;\n    width: 50%;\n`;\n\nconst DetailPresenter = ({ result, loading, error }) =>\n    loading ? (\n        <>\n            <Helmet>\n                <title>Loading | Nomflix</title>\n            </Helmet>\n            <Loader />\n        </>\n    ) : (\n        <>\n            <Helmet>\n                <title>{result?.original_title || result?.original_name || ''} | Netflix</title>\n            </Helmet>\n            {result && (\n                <Container>\n                    <Backdrop\n                        bgImage={\n                            result && result['backdrop_path']\n                                ? `${imagePath}${result['backdrop_path']}`\n                                : require('../../assets/images/noPosterSmall.png').default\n                        }\n                    />\n                    <Content>\n                        <Cover\n                            bgImage={\n                                result && result['backdrop_path']\n                                    ? `${imagePath}${result['poster_path']}`\n                                    : require('../../assets/images/noPosterSmall.png').default\n                            }\n                        />\n                        <Data>\n                            <Title>\n                                {result.original_title\n                                    ? result.original_title\n                                    : result.original_name}\n                            </Title>\n                            <ItemContainer>\n                                <Item>\n                                    {result.release_date\n                                        ? result.release_date.substring(0, 4)\n                                        : result.first_air_date.substring(0, 4)}\n                                </Item>\n                                <Divider>•</Divider>\n                                <Item>\n                                    {result.runtime ? result.runtime : result.episode_run_time[0]}{' '}\n                                    min\n                                </Item>\n                                <Divider>•</Divider>\n                                <Item>\n                                    {result.genres &&\n                                        result.genres.map((genre, index) =>\n                                            index === result.genres.length - 1\n                                                ? genre.name\n                                                : `${genre.name} / `,\n                                        )}\n                                </Item>\n                            </ItemContainer>\n                            <Overview>{result.overview}</Overview>\n                        </Data>\n                    </Content>\n                </Container>\n            )}\n            {error && <Message color=\"#95a5a6\" text={error} />}\n        </>\n    );\nDetailPresenter.propTypes = {\n    result: PropTypes.object,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n};\n\nexport default DetailPresenter;\n","import DetailContainer from \"./DetailContainer\";\nexport default DetailContainer;\n","import React from 'react';\nimport DetailPresenter from './DetailPresenter';\nimport { movieApi, tvApi } from '../../api';\n\nexport default class DetailContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        const {\n            location: { pathname },\n        } = props;\n        this.state = {\n            result: null,\n            error: null,\n            loading: true,\n            isMovie: pathname.includes('/movie/'),\n        };\n    }\n\n    async componentDidMount() {\n        const {\n            match: {\n                params: { id },\n            },\n            history: { push },\n        } = this.props;\n        const { isMovie } = this.state;\n        const parsedId = parseInt(id);\n        if (isNaN(parsedId)) {\n            return push('/');\n        }\n        let result = null;\n        try {\n            if (isMovie) {\n                ({ data: result } = await movieApi.movieDetail(parsedId));\n            } else {\n                ({ data: result } = await tvApi.showDetail(parsedId));\n            }\n        } catch (e) {\n            this.setState({\n                error: \"Can't find anything.\",\n            });\n        } finally {\n            this.setState({\n                loading: false,\n                result,\n            });\n        }\n    }\n\n    render() {\n        const { result, loading, error } = this.state;\n        return <DetailPresenter result={result} loading={loading} error={error} />;\n    }\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport Home from '../Routes/Home';\nimport Search from '../Routes/Search';\nimport TV from '../Routes/TV';\nimport Header from './Header';\nimport Detail from '../Routes/Detail';\n\nconst router = () => (\n    <Router>\n        <>\n            <Header />\n            <Switch>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/tv\" component={TV} />\n                <Route path=\"/search\" component={Search} />\n                <Route path=\"/movie/:id\" component={Detail} />\n                <Route path=\"/show/:id\" component={Detail} />\n                <Redirect from=\"*\" to=\"/\" />\n            </Switch>\n        </>\n    </Router>\n);\nexport default router;\n","import { createGlobalStyle } from 'styled-components';\nimport reset from 'styled-reset';\n\nconst globalStyles = createGlobalStyle`\n  ${reset};\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Centa, serif;\n    font-size: 12px;\n    background-color: rgba(20, 20, 20, 1);\n    color: white;\n    padding-top:50px;\n  }\n`;\n\nexport default globalStyles;\n","import React, { Component } from \"react\";\nimport Router from \"./Router\";\nimport GlobalStyles from \"./GlobalStyles\";\n\nclass App extends Component {\n    render() {\n        return (\n            <>\n                <Router />\n                <GlobalStyles />\n            </>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './Components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}